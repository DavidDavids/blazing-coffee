@page "/"
@inject HttpClient Http

<CardContainer Title="Sales">
    <TelerikGrid @ref="Grid" Height="500px" FilterMode="@GridFilterMode.FilterMenu"
                 Sortable="true" Pageable="true" PageSize="10"
                 OnStateInit="@((GridStateEventArgs<Sale> args) => OnStateInit(args))"
                 Data=@Model.Data TotalCount=@Model.Total OnRead=@ReadItems>
        <GridToolBar>
            <label>Report Range:</label>
            <TelerikDateRangePicker StartValue="@StartValue" EndValue="@EndValue"
                                    StartValueChanged="@((DateTime? sV) => StartValueChangedHandler(sV))"
                                    EndValueChanged="@((DateTime? eV) => EndValueChangedHandler(eV))">
            </TelerikDateRangePicker>
        </GridToolBar>
        <GridColumns>
            <GridColumn Field="@nameof(Sale.Amount)">
                <Template>
                    @{
                        var prod = (Sale)context;
                        <span>@prod.Amount.ToString("C")</span>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(Sale.Region)"></GridColumn>
            <GridColumn Field="@nameof(Sale.Country)"></GridColumn>
            <GridColumn Field="@nameof(Sale.Sku)"></GridColumn>
            <GridColumn Field="@nameof(Sale.StoreId)"></GridColumn>
            <GridColumn Field="@nameof(Sale.TransactionDate)" Filterable="false">
                <Template>
                    @{
                        var prod = (Sale)context;
                        <span>@prod.TransactionDate.ToShortDateString()</span>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </TelerikGrid>
</CardContainer>

@code {

    #region Grid Data Processing
    class SalesViewModel
    {
        public IEnumerable<Sale> Data { get; set; } = new List<Sale>();
        public int Total { get; set; } = 0;
    }

    SalesViewModel Model { get; set; } = new SalesViewModel();

    async Task ReadItems(GridReadEventArgs args)
    {
        var response = await Http.PostAsJsonAsync("api/sales", args.Request);
        if (response.IsSuccessStatusCode)
        {
            Model = await response.Content.ReadFromJsonAsync<SalesViewModel>();
        }
    }
    #endregion

    #region Custom Filtering
    TelerikGrid<Sale> Grid { get; set; }
    DateTime? StartValue { get; set; } = DateTime.Now.AddYears(-4);
    DateTime? EndValue { get; set; } = DateTime.Now.AddDays(10);

    FilterDescriptor StartFilter() => new FilterDescriptor("TransactionDate", FilterOperator.IsGreaterThan, StartValue);
    FilterDescriptor EndFilter() => new FilterDescriptor("TransactionDate", FilterOperator.IsLessThan, EndValue);

    void OnStateInit(GridStateEventArgs<Sale> args)
    {
        args.GridState.FilterDescriptors.Add(StartFilter());
        args.GridState.FilterDescriptors.Add(EndFilter());
    }

    void StartValueChangedHandler(DateTime? currStart)
    {
        //you have to update the model manually because handling the <Parameter>Changed event does not let you use @bind-<Parameter>
        //not updating the model will effectively cancel the event
        StartValue = currStart;

        Console.WriteLine($"start changed to: {currStart}");
    }

    async Task EndValueChangedHandler(DateTime? currEnd)
    {
        // you have to update the model manually because handling the <Parameter>Changed event does not let you use @bind-<Parameter>
        // not updating the model will effectively cancel the event
        EndValue = currEnd;

        // sample check to execute logic only after the user has selected both ends of the range
        // if this does not pass, the user has only clicked once in the calendar popup
        if (currEnd != default(DateTime?))
        {
            var state = Grid.GetState();
            // clear TransactionDate filters
            state.FilterDescriptors = state.FilterDescriptors.Where(f => (f as FilterDescriptor).Member != "TransactionDate").ToList();
            // assign new TransactionDate filters
            state.FilterDescriptors.Add(StartFilter());
            state.FilterDescriptors.Add(EndFilter());
            await Grid.SetState(state);
        }
    }
    #endregion
}